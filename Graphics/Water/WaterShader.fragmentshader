#version 440

// Interpolated values from the vertex shaders

in vec3 position_gs;
in vec3 normal_gs;
in vec3 eye_gs;
in vec3 light_gs;
in vec2 uv_gs;

// Ouput data
out vec4 color;

uniform sampler2D waterTexture;
uniform sampler2D displacementTexture;
uniform float time;
uniform mat4 M;
uniform mat4 V;

void main() {
    vec3 normal = ( V * M * vec4(normal_gs,0)).xyz;

    //color = texture(waterTexture, uv_gs);
    vec4 LightColor = vec4(1,1,1,1);

    // Material properties
    vec4 diffuse = texture(waterTexture, uv_gs);
    vec4 ambient = vec4(0.2,0.2,0.2,1.0) * diffuse;
    vec4 specular = vec4(0.7, 0.7, 0.7, 1.0);

    vec3 n = normalize( normal );
    vec3 l = normalize( light_gs );
    float cosTheta = clamp( dot( n,l ), 0,1 ); //ensure dot product is between 0 and 1

    vec3 E = normalize(eye_gs);
    vec3 R = reflect(-l,n);
    float cosAlpha = clamp( dot( E,R ), 0,1 );

     color =
        // Ambient : simulates indirect lighting
        ambient + 
        // Diffuse : "color" of the object
        diffuse * LightColor * cosTheta +
        // Specular : reflective highlight, like a mirror
        specular * LightColor * pow(cosAlpha,16);
}

