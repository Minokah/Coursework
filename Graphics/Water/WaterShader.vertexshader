#version 440

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 normal;

// Output data
out vec3 position_vs;
out vec3 normal_vs;
out vec3 eye_vs;
out vec3 light_vs;
out vec2 uv_vs;

// Values that stay constant for the whole mesh.
uniform float time;
uniform mat4 M;
uniform mat4 V;
uniform vec3 lightpos;

void main() {
    // Set positions and gl_Position
    position_vs = vertexPosition_modelspace;
    gl_Position = vec4(vertexPosition_modelspace,1);

    // Lighting
    vec3 vertexPosition_cameraspace = ( V * M * vec4(vertexPosition_modelspace,1)).xyz;
    eye_vs = vec3(0,0,0) - vertexPosition_cameraspace;

    vec3 LightPosition_cameraspace = ( V * vec4(lightpos,1)).xyz;
    light_vs = LightPosition_cameraspace + eye_vs;

    //normal_vs = ( V * M * vec4(normal,0)).xyz;

    normal_vs = normal;

    // Set UVs for texture
    vec2 texOffset = vec2(0, 0);
    float texScale = 4;
    uv_vs = (vertexPosition_modelspace.xz + texOffset + (time * 0.08)) / texScale;
}
